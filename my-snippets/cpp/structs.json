{
  "Struct Node": {
    "prefix": "struct node",
    "body": [
      "struct Node {",
      "\t${1:int} ${2:x};",
      "\t${3:int} ${4:y};",
      "\t${5:int} ${6:z};",
      "\tNode(${1:int} ${2:x}, ${3:int} ${4:y}, ${5:int} ${6:z}) : ${2:x}(${2:x}), ${4:y}(${4:y}), ${6:z}(${6:z}) {}",
      "};",
      "$0"
    ],
    "description": "Create a node struct"
  },
  "Node Comparator": {
    "prefix": "node cmp",
    "body": [
      "struct NodeCmp {",
      "  bool operator()(const Node &a, const Node &b) {",
      "    return a.${1:z} > b.${1:z};",
      "  }",
      "};",
      "$0"
    ],
    "description": "Create a custom heap for complex data types"
  },
  "DSU - Disjoint Set Union": {
    "prefix": "DSU",
    "body": [
      "class DSU {",
      "private:",
      "  int groupCount;",
      "  std::vector<int> parent;",
      "  std::vector<int> rank;",
      "  std::vector<int> groupSizes;",
      "",
      "public:",
      "  DSU(int n) {",
      "    groupCount = n;",
      "    parent.resize(n);",
      "    rank.resize(n, 0);",
      "    groupSizes.resize(n, 1);",
      "    for (int i = 0; i < n; ++i) {",
      "      parent[i] = i;",
      "    }",
      "  }",
      "",
      "  int find(int x) {",
      "    if (parent[x] != x) {",
      "      parent[x] = find(parent[x]);",
      "    }",
      "    return parent[x];",
      "  }",
      "",
      "  void join(int x, int y) {",
      "    int rootX = find(x);",
      "    int rootY = find(y);",
      "    if (rootX == rootY) {",
      "      return;",
      "    }",
      "    if (rank[rootX] < rank[rootY]) {",
      "      parent[rootX] = rootY;",
      "      groupSizes[rootY] += groupSizes[rootX];",
      "    } else if (rank[rootX] > rank[rootY]) {",
      "      parent[rootY] = rootX;",
      "      groupSizes[rootX] += groupSizes[rootY];",
      "    } else {",
      "      parent[rootY] = rootX;",
      "      rank[rootX]++;",
      "      groupSizes[rootX] += groupSizes[rootY];",
      "    }",
      "    groupCount--;",
      "  }",
      "",
      "  int groupSize(int x) {",
      "    int root = find(x);",
      "    return groupSizes[root];",
      "  }",
      "",
      "  std::vector<int> groupElements(int x) {",
      "    std::vector<int> elements;",
      "    int root = find(x);",
      "    for (int i = 0; i < parent.size(); ++i) {",
      "      if (find(i) == root) {",
      "        elements.push_back(i);",
      "      }",
      "    }",
      "    return elements;",
      "  }",
      "};",
      "$0"
    ],
    "description": "Create a max heap for integers"
  }
}
